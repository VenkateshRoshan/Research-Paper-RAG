name: RAG API CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.10'
  DOCKER_IMAGE_NAME: research-paper-rag
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  CUDA_VERSION: '11.8.0'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --statistics

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            CUDA_VERSION=${{ env.CUDA_VERSION }}

  deploy-vertex:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Upload model to Vertex AI
        run: |
          gcloud ai models upload \
            --region=${{ secrets.GCP_REGION }} \
            --display-name=research-paper-rag \
            --container-image-uri=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} \
            --container-ports=8080 \
            --container-predict-route=/predict \
            --container-health-route=/health \
            --machine-type=nvidia-tesla-t4 \
            --accelerator-type=NVIDIA_TESLA_T4 \
            --accelerator-count=1

          MODEL_ID=$(gcloud ai models list \
            --region=${{ secrets.GCP_REGION }} \
            --filter="display_name=research-paper-rag" \
            --format="value(name)" \
            --limit=1)
          echo "MODEL_ID=${MODEL_ID}" >> $GITHUB_ENV

      - name: Deploy to Vertex AI endpoint
        run: |
          gcloud ai endpoints deploy-model ${{ secrets.VERTEX_ENDPOINT_ID }} \
            --region=${{ secrets.GCP_REGION }} \
            --model=${{ env.MODEL_ID }} \
            --display-name=research-paper-rag-endpoint \
            --machine-type=n1-standard-4 \
            --min-replica-count=1 \
            --max-replica-count=2 \
            --accelerator-type=NVIDIA_TESLA_T4 \
            --accelerator-count=1 \
            --traffic-split=0=100 \
            --quiet

      - name: Verify Deployment
        run: |
          sleep 180
          
          DEPLOYMENT_STATUS=$(gcloud ai endpoints describe ${{ secrets.VERTEX_ENDPOINT_ID }} \
            --region=${{ secrets.GCP_REGION }} \
            --format='value(deployedModels[0].state)' --quiet)
          
          if [ "$DEPLOYMENT_STATUS" != "DEPLOYED" ]; then
            echo "Deployment failed with status: $DEPLOYMENT_STATUS"
            exit 1
          fi
          
          ENDPOINT_URL=$(gcloud ai endpoints describe ${{ secrets.VERTEX_ENDPOINT_ID }} \
            --region=${{ secrets.GCP_REGION }} \
            --format='value(deployedModels[0].uri)' --quiet)
          echo "Endpoint URL: $ENDPOINT_URL"

      - name: Deployment Summary
        if: always()
        run: |
          echo "Deployment Status: ${{ job.status }}"
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Region: ${{ secrets.GCP_REGION }}"
          echo "Endpoint ID: ${{ secrets.VERTEX_ENDPOINT_ID }}"
          echo "Model ID: ${{ env.MODEL_ID }}"
          echo "Docker Image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"

      - name: Deployment Notification
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { status, conclusion } = context.job
            const message = `Deployment to Vertex AI ${conclusion === 'success' ? 'succeeded' : 'failed'}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: message
            })